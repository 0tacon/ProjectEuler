/*

Copyright 2014 Daniel Forde

This file is part of ProjectEuler.

ProjectEuler is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ProjectEuler is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with ProjectEuler.  If not, see <http://www.gnu.org/licenses/>.

*/

/*
    Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

    It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

    Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
*/

#include <cstdint>
#include <cstdio>
#include <vector>
#include <utility>
#include <algorithm>

bool Problem44()
{
    std::vector<uint32_t> pentagonal_nums;
    std::vector<std::pair<uint32_t, uint32_t> > results;

    for (uint16_t i = 1; i < 2400; i++)
        pentagonal_nums.push_back((i*(3*i - 1))/2);

    uint32_t answer = pentagonal_nums.at(pentagonal_nums.size() - 1);

    for (std::vector<uint32_t>::iterator k = std::next(pentagonal_nums.begin(), 1); k != pentagonal_nums.end(); k++)
        for (std::vector<uint32_t>::iterator j = pentagonal_nums.begin(); j != k; j++)
            if (std::count(pentagonal_nums.begin(), pentagonal_nums.end(), *k + *j) == 1 && std::count(pentagonal_nums.begin(), pentagonal_nums.end(), *k - *j) == 1)
                results.push_back(std::make_pair(*k, *j));

    for (std::vector<std::pair<uint32_t, uint32_t> >::iterator itr = results.begin(); itr != results.end(); itr++)
        if ((itr->first - itr->second) < answer)
            answer = itr->first - itr->second;

    std::printf("\nProblem 044: %u\n", answer);
    return true;
}
